name: translate

env:
  TRANS_TYPE: 'deepl'
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  APIKEY: ${{ secrets.APIKEY }}
  BASEURL: 'https://api.openai.com/v1'
  MODEL: 'gpt-3.5-turbo-0125'

on:
  workflow_dispatch:
    inputs:
      apikey:
        description: 'gpt apikey'
        required: False
        default: ${APIKEY}
      baseurl:
        description: 'gpt baseurl'
        required: False
        default: ${BASEURL}
      model:
          description: 'gpt model'
          required: False
          default: ${MODEL}
      method:
          description: 'Translation method(google or gpt)'
          required: True
          default: ${TRANS_TYPE}

concurrency:
  group: "translation"

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  translate:
    strategy:
      max-parallel: 1
      matrix:
        files: ['data/*.json','data/*/*.json']
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@master
      with:
        ref: 'main'
    - uses: actions/setup-python@v3
      with:
        python-version: '3.9'
        architecture: 'x64'
    - name: Set up dependencies
      run: |
           #sudo apt-get install -y firefox
           pip3 install selenium webdriver_manager openai google-generativeai
    - name: Generate translations
      continue-on-error: true
      run: |
           cd $GITHUB_WORKSPACE
           ls
           python trans-comp.py --translate --maxrun 18000 --ai ${{ inputs.method }} ${{ matrix.files }} 
           python trans-comp.py --translate ${{ matrix.files }}
      env:
          BASEURL: ${{ inputs.baseurl}}
          MODEL: ${{ inputs.model }}
    - name: Save results
      continue-on-error: true
      run: |
           git config user.name "Automatic translator"
           git config user.email "<>"
           git add --ignore-errors -A
           git status -s
           git commit -m 'automatic translation'
           git status
           git checkout HEAD .
           git pull --rebase --autostash
           git push origin main || true
           # Try again with a short delay in case it fails (conflicting pushes)
           sleep $((1 + $RANDOM % 10 * 10))
           git pull --rebase --autostash
           git push origin main || true
           #sleep $((1 + $RANDOM % 10 * 10))
           #git pull --rebase --autostash
           #git push origin main || true
           #sleep $((1 + $RANDOM % 10 * 10))
           #git pull --rebase --autostash
           #git push origin main || true  
